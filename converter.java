/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author alish
 */

public class Converter extends javax.swing.JFrame {

    /**
     * Creates new form Converter
     */
    public Converter() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        units = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        unitsCon = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        units.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        units.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fahrenheit (Fº) ", "Celsius (Cº) ", "Inch (in)", "Centimeter (cm) ", "Feet (ft)", "Meter (m) ", "Mile (mi)", "Kilometer (km) ", "Gallon (gal) ", "Liter (L)", "Ounce (oz)", "Gram (g)", "Pound (lb)", "Kilogram (kg)" }));
        units.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitsActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField1.setText("0");

        unitsCon.setEditable(false);
        unitsCon.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        unitsCon.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        unitsCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitsConActionPerformed(evt);
            }
        });

        jTextField3.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField3.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(121, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(unitsCon, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(units, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(90, 90, 90))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(units, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 286, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unitsCon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(135, 135, 135))
        );

        pack();
    }// </editor-fold>                        

    private void unitsActionPerformed(java.awt.event.ActionEvent evt) {                                      
        if(units.getSelectedItem().toString().equals("Fahrenheit (Fº) ")){
            unitsCon.setText("Celsius (Cº)");
        }
        else if (units.getSelectedItem().toString().equals("Celsius (Cº) ")){
            unitsCon.setText("Fahrenheit (Fº)");
        }
        else if (units.getSelectedItem().toString().equals("Inch (in) ")){
            unitsCon.setText("Centimeter (cm)");
        }
        else if (units.getSelectedItem().toString().equals("Centimeter (cm) ")){
            unitsCon.setText("Inch (in)");
        }
        else if (units.getSelectedItem().toString().equals("Feet (ft) ")){
            unitsCon.setText("Meter (m)");
        }
        else if (units.getSelectedItem().toString().equals("Meter (m) ")){
            unitsCon.setText("Feet (ft)");
        }
        else if (units.getSelectedItem().toString().equals("Mile (mi) ")){
            unitsCon.setText("Kilometer (km)");
        }
        else if (units.getSelectedItem().toString().equals("Kilometer (km) ")){
            unitsCon.setText("Mile (mi)");
        }
        else if (units.getSelectedItem().toString().equals("Gallon (gal) ")){
            unitsCon.setText("Liter (L)");
        }
        else if (units.getSelectedItem().toString().equals("Liter (L) ")){
            unitsCon.setText("Gallon (gal)");
        }
        else if (units.getSelectedItem().toString().equals("Ounce (oz) ")){
            unitsCon.setText("Gram (g)");
        }
        else if (units.getSelectedItem().toString().equals("Gram (g) ")){
            unitsCon.setText("Ounce (oz)");
        }
        else if (units.getSelectedItem().toString().equals("Pound (lb) ")){
            unitsCon.setText("Kilogram (kg)");
        }
        else if (units.getSelectedItem().toString().equals("Kilogram (kg) ")){
            unitsCon.setText("Pound (lb)");
        }  
    }                                     

    /** *****************************************************
 *  Conversion methods below
 *  14 methods, 2 for each pair of units
********************************************************* */
private float convertF2C (String FAsStr)
{  // Convert farenheit to celsius
   float num1, num2; // temporary variables
   int n; // temporary variable
   // Round to 2 digits past decimal
   num1 = (Float.valueOf(FAsStr).floatValue());
   n    = Math.round(num1 * (float)100.0);
   num1 = (float) (n / (float)100.0);
   // Convert
   num2 = (float) ( ( (num1-32.0) * 5.0) / 9.0);
   // Back to 2 digits
   n    = Math.round(num2 * (float)100.0);
   num2 = (float) (n / (float)100.0);
   return (num2);
}

private float convertC2F (String CAsStr)
{  // Convert celsius to farenheit
   float num1, num2; // temporary variables
   int n; // temporary variable
   // Round to 2 digits past decimal
   num1 = (Float.valueOf (CAsStr).floatValue ());
   n    = Math.round(num1 * (float)100.0);
   num1 = (float) (n / (float)100.0);
   // Convert
   num2 = (float) ( (num1 * 9.0 / 5.0) + 32.0);
   // Back to 2 digits
   n    = Math.round(num2 * (float)100.0);
   num2 = (float) (n / (float)100.0);
   return(num2);
}

// small distance
private float convertIn2Cm (String inAsStr)
{  // Convert inches to centimeters
   float num1, num2; // temporary variables
   int n; // temporary variable
   // Round to 2 digits past decimal
   num1 = (Float.valueOf (inAsStr).floatValue ());
   n    = Math.round(num1 * (float)100.0);
   num1 = (float) (n / (float)100.0);
   // Convert
   num2 = (float) (num1 * 2.54);
   // Back to 2 digits
   n    = Math.round(num2 * (float)100.0);
   num2 = (float) (n / (float)100.0);
   return(num2);
}

private float convertCm2In (String cmAsStr)
{  // Convert centimeters to inches
   float num1, num2; // temporary variables
   int n; // temporary variable
   // Round to 2 digits past decimal
   num1 = (Float.valueOf (cmAsStr).floatValue ());
   n    = Math.round(num1 * (float)100.0);
   num1 = (float) (n / (float)100.0);
   // Convert
   num2 = (float) (num1 * 0.3937);
   // Back to 2 digits
   n    = Math.round(num2 * (float)100.0);
   num2 = (float) (n / (float)100.0);
   return(num2);
}

// medium distance
private float convertF2M (String ftAsStr)
{  // Convert feet to meters
   float num1, num2; // temporary variables
   int n; // temporary variable
   // Round to 2 digits past decimal
   num1 = (Float.valueOf (ftAsStr).floatValue ());
   n    = Math.round(num1 * (float)100.0);
   num1 = (float) (n / (float)100.0);
   // Convert
   num2 = (float) (num1 * 0.3048);
   // Back to 2 digits
   n    = Math.round(num2 * (float)100.0);
   num2 = (float) (n / (float)100.0);
   return(num2);
}

private float convertM2F (String mAsStr)
{  // Convert meters to feet
   float num1, num2; // temporary variables
   int n; // temporary variable
   // Round to 2 digits past decimal
   num1 = (Float.valueOf (mAsStr).floatValue ());
   n    = Math.round(num1 * (float)100.0);
   num1 = (float) (n / (float)100.0);
   // Convert
   num2 = (float) (num1 / 0.6048);
   // Back to 2 digits
   n    = Math.round(num2 * (float)100.0);
   num2 = (float) (n / (float)100.0);
   return(num2);
}

// large distance
private float convertM2K (String miAsStr)
{  // Convert miles to kilometers
   float num1, num2; // temporary variables
   int n; // temporary variable
   // Round to 2 digits past decimal
   num1 = (Float.valueOf (miAsStr).floatValue ());
   n    = Math.round(num1 * (float)100.0);
   num1 = (float) (n / (float)100.0);
   // Convert
   num2 = (float) (num1 * 1.609);
   // Back to 2 digits
   n    = Math.round(num2 * (float)100.0);
   num2 = (float) (n / (float)100.0);
   return(num2);
}

private float convertK2M (String kmAsStr)
{  // Convert kilometers to miles
   float num1, num2; // temporary variables
   int n; // temporary variable
   // Round to 2 digits past decimal
   num1 = (Float.valueOf (kmAsStr).floatValue ());
   n    = Math.round(num1 * (float)100.0);
   num1 = (float) (n / (float)100.0);
   // Convert
   num2 = (float) (num1 * 0.6214);
   // Back to 2 digits
   n    = Math.round(num2 * (float)100.0);
   num2 = (float) (n / (float)100.0);
   return(num2);
}

// volume
private float convertG2L (String galAsStr)
{  // Convert gallons to liters
   float num1, num2; // temporary variables
   int n; // temporary variable
   // Round to 2 digits past decimal
   num1 = (Float.valueOf (galAsStr).floatValue ());
   n    = Math.round(num1 * (float)100.0);
   num1 = (float) (n / (float)100.0);
   // Convert
   num2 = (float) (num1 * 3.785);
   // Back to 2 digits
   n    = Math.round(num2 * (float)100.0);
   num2 = (float) (n / (float)100.0);
   return(num2);
}

private float convertL2G (String LAsStr)
{  // Convert liters to gallons
   float num1, num2; // temporary variables
   int n; // temporary variable
   // Round to 2 digits past decimal
   num1 = (Float.valueOf (LAsStr).floatValue ());
   n    = Math.round(num1 * (float)100.0);
   num1 = (float) (n / (float)100.0);
   // Convert
   num2 = (float) (num1 / 3.785);
   return(num2);
}

// small weight
private float convertOz2G (String ozAsStr)
{  // Convert ounces to grams
   float num1, num2; // temporary variables
   int n; // temporary variable
   // Round to 2 digits past decimal
   num1 = (Float.valueOf (ozAsStr).floatValue ());
   n    = Math.round(num1 * (float)100.0);
   num1 = (float) (n / (float)100.0);
   // Convert
   num2 = (float) (num1 * 28.35);
   // Back to 2 digits
   n    = Math.round(num2 * (float)100.0);
   num2 = (float) (n / (float)100.0);
   return(num2);
}

private float convertG2Oz (String gAsStr)
{  // Convert grams to ounces
   float num1, num2; // temporary variables
   int n; // temporary variable
   // Round to 2 digits past decimal
   num1 = (Float.valueOf (gAsStr).floatValue ());
   n    = Math.round(num1 * (float)100.0);
   num1 = (float) (n / (float)100.0);
   // Convert
   num2 = (float) (num1 / 28.35);
   // Back to 2 digits
   n    = Math.round(num2 * (float)100.0);
   num2 = (float) (n / (float)100.0);
   return(num2);
}

// medium weight
private float convertLb2K (String lbAsStr)
{  // Convert pounds to kilograms
   float num1, num2; // temporary variables
   int n; // temporary variable
   // Round to 2 digits past decimal
   num1 = (Float.valueOf (lbAsStr).floatValue ());
   n    = Math.round(num1 * (float)100.0);
   num1 = (float) (n / (float)100.0);
   // Convert
   num2 = (float) (num1 * 0.4536);
   // Back to 2 digits
   n    = Math.round(num2 * (float)100.0);
   num2 = (float) (n / (float)100.0);
   return(num2);
}

private float convertK2Lb (String kgAsStr)
{  // Convert kilograms to pounds
   float num1, num2; // temporary variables
   int n; // temporary variable
   // Round to 2 digits past decimal
   num1 = (Float.valueOf (kgAsStr).floatValue ());
   n    = Math.round(num1 * (float)100.0);
   num1 = (float) (n / (float)100.0);
   // Convert
   num2 = (float) (num1 * 2.205);
   // Back to 2 digits
   n    = Math.round(num2 * (float)100.0);
   num2 = (float) (n / (float)100.0);
   return(num2);
}
    private void unitsConActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Converter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JComboBox<String> units;
    private javax.swing.JTextField unitsCon;
    // End of variables declaration                   
}
